<?php
/*
*   ###########
*   #__________#
*   __________#
*   ________#
*   _____###_____²xiT development
*   _________#
*   ___________#
*   #__________#
*   _#________#
*   __#______#
*   ____####
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING         
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS 
* IN THE SOFTWARE.
*/

/**
*   @author     Joris Berthelot <admin@eexit.net>
*   @copyright  Copyright (c) 2009, Joris Berthelot
*   @version    1.02
*/
class Smak {
    
    /**
     *  The GET param where templates are redirected
     *  See the Rewrite Rule
     *  @since 1.00
     *  @version 1.00
     */
    const REWRITE_PARAM = 'tpl';
    
    /**
     *  The RegEx to validate URL
     *  Here it allows URL like: foo-bAr/baZ_12
     *  @since 1.00
     *  @version 1.00
     */
    const URL_PATTERN = '/^[[:alnum:]-\/_]+$/i';
    
    /**
     *  The menu generation list element pattern
     *  %target% is the link content
     *  %title% is the link title
     *  %class% is used to set {@link NAV_CURRENT_CSS_CLASS}
     *  %label% is the link text content
     *  @since 1.00
     *  @version 1.01
     */
    const NAV_LI_PATTERN = '<li><a href="%target%" title="%title%" 
                            %class%>%label%</a></li>';
    
    /**
     *  The CSS class which is added to the menu list item when the current
     *  template is a list item or sub list item (in page tree)
     *  @since 1.00
     *  @version 1.01
     */
    const NAV_CURRENT_CSS_CLASS = 'class="current"';
    
    /**
     *  The script execution include path. When a Smak object is created
     *  the new include path goes here.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_inc_path;
    
    /**
     *  The requested template (the result of GET param)
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_tpl_req;
    
    /**
     *  The template file extension. Could be set by
     *  {@link setTplExt()} method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_tpl_ext = '.tpl';
    
    /**
     *  The template file path. Could be set by
     *  setTplPath() method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_tpl_path = 'tpl/';
    
    /**
     *  The side template file path. Could be set by
     *  setTplSidePath() method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_tpl_side_path = 'tpl/side/';
    
    /**
     *  The default template to include in index page.
     *  You could set this value using {@link setTplDefault()} method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_tpl_default = 'index';
    
    /**
     *  The title format. It must contain %title% keyword which is
     *  replaced by the template title (which is in fact the file name).
     *  Could be set by {@link setTitleFormat()} method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_title_format = '%title%';
    
    /**
     *  The index template title. Title is usually generated by the requested
     *  template. On index page, there is no template request it needs to have
     *  a default title. Additionally, it could be useful to custom only index
     *  title.
     *  Could be set by {@link setTitleIndex()} method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_title_index = 'Homepage';
    
    /**
     *  The title separator. When a sub(-sub..)-template is loaded, the title
     *  is generated from template name. The breadcrumb use this pattern to
     *  seperate template names.
     *  Could be set by {@link setTitleTplSeparator()} method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_title_tpl_separator = ' &raquo; ';
    
    /**
     *  The navigation links goes here once the navigation JSON file is loaded 
     *  by loadNav() method.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     */
    protected $_nav;
    
    /**
     *  Class constructor. When called, it inits the new include path and
     *  retrieves the requested template. See {@link $_inc_path}.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param [string $inc_path = './../inc' The default include path]
     */
    public function __construct($inc_path = './../inc') {
        try {
            if (
                is_dir($inc_path)
                && ini_set('include_path', $inc_path . PATH_SEPARATOR . '.')
            ) {
                $this->_inc_path = $inc_path . DIRECTORY_SEPARATOR;
                $this->_getRequestedTpl();                
            } else {
                throw new Exception(
                    'Unable to set the new include directory « '
                    . $inc_path
                    . ' »!');
            }
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Overloading method. Used for DRY method, allows to call similar methods.
     *  Used for method call like setTplPath(), setTplSidePath(), getBodyTpl(), 
     *  getSideTpl() and loadNav(). 
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param string $func The method name
     *  @param array $args The method arguments
     *  @return object $this The current class instance
     */
    public function __call($func, $args) {
        try {
            switch ($func) {
                case 'setTplPath' :
                    return $this->_setDir($this->_tpl_path, $args[0]);
                    break;
                case 'setTplSidePath' :
                    return $this->_setDir($this->_tpl_side_path, $args[0]);
                    break;
                case 'getBodyTpl' :
                    return $this->_getTpl($this->_tpl_path);
                    break;
                case 'getSideTpl' :
                    return $this->_getTpl($this->_tpl_side_path);
                    break;
                case 'loadNav' :
                    $this->_nav = $this->_loadJson($args[0]);
                    return $this;
                    break;
                default :
                    throw new Exception(get_class($this)
                        . '::'
                        . $func
                        . '() does not exist!');
            }
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Sets the new default template file extension. You are allowed to set
     *  an extension name until 6 characters alphanumeric after the dot.
     *  See {@link $_tpl_ext}.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param string $ext The new default template file extension
     *  @return object $this The current class instance
     */
    public function setTplExt($ext) {
        try {
            if (preg_match('/^\.([[:alnum:]]){1,6}$/i', $ext)) {
                $this->_tpl_ext = htmlentities($ext);
                return $this;
            }
            throw new Exception(
                'Unable to set file extension « '
                . $ext
                . ' »! Must respect format /^\.([[:alnum:]]){1,6}$/i');
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Sets the new default template. This template is the one which is 
     *  included at the index page. Enter template path + name without template
     *  file extension. See {@link $_tpl_default}.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param string $tpl The template name
     *  @return object $this The current class instance
     */
    public function setTplDefault($tpl) {
        try {
            if (is_file(
                $this->_inc_path
                . $this->_tpl_path
                . $tpl
                . $this->_tpl_ext)
            ) {
                $this->_tpl_default = $tpl;
                return $this;
            }
            throw new Exception(
                'Unable to find the new default template file « '
                . $tpl
                . $this->_tpl_ext
                . ' » in '
                . $this->_tpl_path);
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Sets the new default index template title. See {@link $_title_index}
     *  property for more details.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param string $title The new title
     *  @return object $this The current class instance
     */
    public function setTitleIndex($title) {
        $this->_title_index = htmlentities($title);
        return $this;
    }
    
    /**
     *  Sets the title format pattern. This pattern is used to display your 
     *  template title. See {@link $_title_format}.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param string $pattern The title pattern
     *  @return object $this The current class instance
     */
    public function setTitleFormat($pattern) {
        try {
            if (strstr($pattern, '%title%')) {
                $this->_title_format = htmlentities($pattern);
                return $this;
            }
            throw new Exception(
                'Unable to find the title pattern « %title% »
                in the new title format!');
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Sets the title template separator pattern. When title is generated from
     *  template tree, all template name are separated by this pattern.
     *  See {@link $_title_tpl_separator}.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param string $separator The new sperator
     *  @return object $this The current class instance
     */
    public function setTitleTplSeparator($separator) {
        $this->_title_tpl_separator = htmlentities($separator);
        return $this;
    }
    
    /**
     *  Generates the navigation menu. The only one parameter is used if you
     *  need to insert some custom HTML attributes (like id or class).
     *  List item pattern is available here: {@link NAV_LI_PATTERN}.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @param [string $html_attr = null Custom list container HTML attributes]
     *  @return string $output The final HTML generated menu
     */
    public function getNav($html_attr = null) {
        $output = '<ul '
                . $html_attr
                . ' >'
                . "\n\t";
        
        foreach ($this->_nav as $nav_item) {
            
            $css_class = $this->_isInternalTarg($nav_item)
                         && $this->_isCurrentTpl($nav_item)
                         ? self::NAV_CURRENT_CSS_CLASS
                         : null;
            
            $target = $this->_isInternalTarg($nav_item)
                      ? DIRECTORY_SEPARATOR . $nav_item->tpl
                      : $nav_item->url;
            
            $output .= str_replace(array(
                '%target%',
                '%title%',
                '%class%',
                '%label%'
            ), array(
                $target,
                $nav_item->title,
                $css_class,
                $nav_item->label
            ), self::NAV_LI_PATTERN)
            . "\n\t";
        }
        
        return substr($output, 0, -1)
               . "</ul>";
    }
    
    /**
     *  Generates the title from the current template. See
     *  {@link $_title_index}, {@link $_title_format} and
     *  {@link $_title_tpl_separator}.
     *  @since 1.00
     *  @version 1.02
     *  @access public
     *  @return string $output The final template title
     */
    public function getTplTitle() {
        if (is_null($this->_tpl_req)) {
            return str_replace(
                '%title%',
                $this->_title_index,
                $this->_title_format);
        }
        
        $words = explode(DIRECTORY_SEPARATOR, $this->_tpl_req);
        
        count($words) > 1 && in_array('index', $words)
        ? array_pop($words)
        : null;
    
        foreach ($words as &$word) {
            $word = ucfirst($word);
        }
        
        return str_replace(
            '%title%',
            implode($this->_title_tpl_separator, $words),
            $this->_title_format);
    }
    
    /**
     *  Loads a given JSON file and returns it content as object.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     *  @param string $file The path and the name to the JSON file
     *  @return object $json The converted JSON file
     */
    protected function _loadJson($file) {
        try {
            if (is_file($this->_inc_path . $file)) {
                $json = json_decode(file_get_contents($this->_inc_path . $file));
                if (!$json) {
                    throw new Exception(
                        'Unable to parse « ' . $file . ' » JSON file!');
                }
                return $json;
            }
            throw new Exception('Unable to load « ' . $file . ' » JSON file!');
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Sends a HTTP code if the template is not found or other custom HTTP 
     *  code. It's followed by a redirection to the / because the HTTP is 
     *  generated from a normal page.
     *  @since 1.00
     *  @version 1.02
     *  @access protected
     *  @param int $code Wanted HTTP code
     */
    protected function _sendHttpCode($code) {
        header('HTTP/1.0 '. $code);
        header('Location: /');
        exit;
    }
    
    /**
     *  Retrieves the requested template. Gets the GET parameter sent
     *  by the rewrite rule and assigns the requested template to
     *  {@link $_tpl_req} if it exists.
     *  @since 1.00
     *  @version 1.02
     *  @access private
     */
    private function _getRequestedTpl() {
        try {
            if (
                isset($_GET[self::REWRITE_PARAM])
                || $_SERVER['REQUEST_URI'] == DIRECTORY_SEPARATOR
            ) {
                $req = isset($_GET[self::REWRITE_PARAM])
                       ? $_GET[self::REWRITE_PARAM]
                       : null;
                if (!is_null($req)) {
                    if (
                        preg_match(self::URL_PATTERN, $req)
                        && $this->_issetTpl($req)
                    ) {
                        $this->_tpl_req = strtolower($req);
                    } else {
                        $this->_sendHttpCode(404);
                    }
                }
            } else if (
                $_SERVER['REQUEST_URI']
                == DIRECTORY_SEPARATOR . 'index.php'
            ) {
                header('Location: /');
                exit;
            } else {
                throw new Exception(
                    'Unable to get requested template.
                    Check rewrite rules and Smak::REWRITE_PARAM.');
            }
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Checks if the template file name given in parameter exists.
     *  @since 1.00
     *  @version 1.02
     *  @access private
     *  @param string $tpl The template path + name
     *  @return bool
     */
    private function _issetTpl($tpl) {
        if (is_file($this->_inc_path
            . $this->_tpl_path
            . $tpl
            . $this->_tpl_ext)
        ) {
            return true;
        }
        return false;
    }
    
    /**
     *  Sets the a new value to a template or side template path.
     *  This method is called in intern via {@link __call()} overloading
     *  method.
     *  @since 1.00
     *  @version 1.02
     *  @access private
     *  @param string &$attr The path to update
     *  @param string $value The new path value
     *  @return object $this The current class instance
     */
    private function _setDir(&$attr, $value) {
        try {
            if (
                $value[strlen($value)-1] == DIRECTORY_SEPARATOR
                && is_dir($this->_inc_path . $value)
            ) {
                $attr = $value;
                return $this;
            }
            throw new Exception(
                'Unable to set the new template path « ' . $value . '»!');
        } catch (Exception $e) {
            trigger_error($e->getMessage(), E_USER_ERROR);
        }
    }
    
    /**
     *  Returns the requested template file if it exists. This method is
     *  called in intern via {@link __call()} overloading method.
     *  @since 1.00
     *  @version 1.02
     *  @access private
     *  @param string $part The path to look for the template file
     *  @return string $filename The requested template path + file name
     */
    private function _getTpl($part) {
        $tpl = is_null($this->_tpl_req) ? $this->_tpl_default : $this->_tpl_req;
        
        if (is_file($this->_inc_path . $part . $tpl . $this->_tpl_ext)) {
            return $this->_inc_path . $part . $tpl . $this->_tpl_ext;
        }
    }
    
    /**
     *  Tests if the navigation link of the given parameter is an external
     *  link or links to a template file.
     *  @since 1.00
     *  @version 1.02
     *  @access private
     *  @param object $nav_item Navigation item
     *  @return bool
     */
    private function _isInternalTarg($nav_item) {
        return property_exists($nav_item, 'tpl');
    }
    
    /**
     *  Tests if the current navigation menu is the Website index.
     *  @since 1.00
     *  @version 1.02
     *  @access private
     *  @param object $nav_item Navigation item
     *  @return bool
     */
    private function _isIndex($nav_item) {
        return $this->_isInternalTarg($nav_item)
               && is_null($nav_item->tpl)
               && (empty($this->_tpl_req)
               || $this->_tpl_req == $this->_tpl_default);
    }
    
    /**
     *  Checks if the navigation item given as parameter is part of the
     *  current applied template. If true, the {@link NAV_CURRENT_CSS_CLASS}
     *  CSS class will be applied to the current navigation item.
     *  @since 1.00
     *  @version 1.02
     *  @access private
     *  @param object $nav_item Navigation item
     *  @return bool
     */
    private function _isCurrentTpl($nav_item) {
        if ($this->_isIndex($nav_item)) {
            return true;
        } else if(!empty($this->_tpl_req)) {
            if (substr(
                $nav_item->tpl,
                0,
                strpos($nav_item->tpl,'.'))
                == $this->_tpl_req
            ) {
                return true;
            } else {
                $nav_tpl = explode(DIRECTORY_SEPARATOR, $nav_item->tpl);
                $current_tpl = explode(DIRECTORY_SEPARATOR, $this->_tpl_req);
                
                if (count(array_intersect($nav_tpl, $current_tpl))) {
                   return true; 
                }
            }
        }
        return false;
    }
}
?>